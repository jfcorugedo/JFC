// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.myhome.controller;

import com.myhome.controller.CardController;
import com.myhome.model.Card;
import com.myhome.service.AttributeService;
import com.myhome.service.CardService;
import com.myhome.service.CardTypeService;
import com.myhome.service.UserService;
import java.io.UnsupportedEncodingException;
import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.util.UriUtils;
import org.springframework.web.util.WebUtils;

privileged aspect CardController_Roo_Controller {
    
    @Autowired
    CardService CardController.cardService;
    
    @Autowired
    AttributeService CardController.attributeService;
    
    @Autowired
    CardTypeService CardController.cardTypeService;
    
    @Autowired
    UserService CardController.userService;
    
    @RequestMapping(method = RequestMethod.POST, produces = "text/html")
    public String CardController.create(@Valid Card card, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            populateEditForm(uiModel, card);
            return "cards/create";
        }
        uiModel.asMap().clear();
        cardService.saveCard(card);
        return "redirect:/cards/" + encodeUrlPathSegment(card.getId().toString(), httpServletRequest);
    }
    
    @RequestMapping(params = "form", produces = "text/html")
    public String CardController.createForm(Model uiModel) {
        populateEditForm(uiModel, new Card());
        return "cards/create";
    }
    
    @RequestMapping(value = "/{id}", produces = "text/html")
    public String CardController.show(@PathVariable("id") Long id, Model uiModel) {
        addDateTimeFormatPatterns(uiModel);
        uiModel.addAttribute("card", cardService.findCard(id));
        uiModel.addAttribute("itemId", id);
        return "cards/show";
    }
    
    @RequestMapping(produces = "text/html")
    public String CardController.list(@RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model uiModel) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            final int firstResult = page == null ? 0 : (page.intValue() - 1) * sizeNo;
            uiModel.addAttribute("cards", cardService.findCardEntries(firstResult, sizeNo));
            float nrOfPages = (float) cardService.countAllCards() / sizeNo;
            uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            uiModel.addAttribute("cards", cardService.findAllCards());
        }
        addDateTimeFormatPatterns(uiModel);
        return "cards/list";
    }
    
    @RequestMapping(method = RequestMethod.PUT, produces = "text/html")
    public String CardController.update(@Valid Card card, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            populateEditForm(uiModel, card);
            return "cards/update";
        }
        uiModel.asMap().clear();
        cardService.updateCard(card);
        return "redirect:/cards/" + encodeUrlPathSegment(card.getId().toString(), httpServletRequest);
    }
    
    @RequestMapping(value = "/{id}", params = "form", produces = "text/html")
    public String CardController.updateForm(@PathVariable("id") Long id, Model uiModel) {
        populateEditForm(uiModel, cardService.findCard(id));
        return "cards/update";
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE, produces = "text/html")
    public String CardController.delete(@PathVariable("id") Long id, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model uiModel) {
        Card card = cardService.findCard(id);
        cardService.deleteCard(card);
        uiModel.asMap().clear();
        uiModel.addAttribute("page", (page == null) ? "1" : page.toString());
        uiModel.addAttribute("size", (size == null) ? "10" : size.toString());
        return "redirect:/cards";
    }
    
    void CardController.addDateTimeFormatPatterns(Model uiModel) {
        uiModel.addAttribute("card_scheduleddate_date_format", "dd/MM/yyyy");
    }
    
    void CardController.populateEditForm(Model uiModel, Card card) {
        uiModel.addAttribute("card", card);
        addDateTimeFormatPatterns(uiModel);
        uiModel.addAttribute("attributes", attributeService.findAllAttributes());
        uiModel.addAttribute("cardtypes", cardTypeService.findAllCardTypes());
        uiModel.addAttribute("users", userService.findAllUsers());
    }
    
    String CardController.encodeUrlPathSegment(String pathSegment, HttpServletRequest httpServletRequest) {
        String enc = httpServletRequest.getCharacterEncoding();
        if (enc == null) {
            enc = WebUtils.DEFAULT_CHARACTER_ENCODING;
        }
        try {
            pathSegment = UriUtils.encodePathSegment(pathSegment, enc);
        } catch (UnsupportedEncodingException uee) {}
        return pathSegment;
    }
    
}
